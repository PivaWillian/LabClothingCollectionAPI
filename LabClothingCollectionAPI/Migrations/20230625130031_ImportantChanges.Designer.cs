// <auto-generated />
using System;
using LabClothingCollectionAPI.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabClothingCollectionAPI.Migrations
{
    [DbContext(typeof(LabClothingContext))]
    [Migration("20230625130031_ImportantChanges")]
    partial class ImportantChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LabClothingCollectionAPI.Entities.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Budget")
                        .HasMaxLength(20)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("LabClothingCollectionAPI.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int>("Layout")
                        .HasColumnType("int");

                    b.Property<int>("Models")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("LabClothingCollectionAPI.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1989, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocNumber = "098.098.349-48",
                            Email = "joao@joao.com",
                            FullName = "João dos Santos",
                            Gender = "Masculino",
                            PhoneNumber = "04832631026",
                            Status = "Ativo",
                            UserType = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1990, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocNumber = "043.098.349-48",
                            Email = "jose@jose.com",
                            FullName = "Jose dos Santos",
                            Gender = "Masculino",
                            PhoneNumber = "04832631526",
                            Status = "Ativo",
                            UserType = "Administrador"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1989, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocNumber = "098.054.349-48",
                            Email = "john@john.com",
                            FullName = "John dos Santos",
                            Gender = "Masculino",
                            PhoneNumber = "04742631026",
                            Status = "Ativo",
                            UserType = "Administrador"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1989, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocNumber = "098.098.398-48",
                            Email = "jonas@jonas.com",
                            FullName = "Jonas dos Santos",
                            Gender = "Masculino",
                            PhoneNumber = "04832631666",
                            Status = "Ativo",
                            UserType = "Administrador"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1989, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocNumber = "054.098.349-48",
                            Email = "jordao@jordao.com",
                            FullName = "Jordão dos Santos",
                            Gender = "Masculino",
                            PhoneNumber = "05632631026",
                            Status = "Ativo",
                            UserType = "Administrador"
                        });
                });

            modelBuilder.Entity("LabClothingCollectionAPI.Entities.Model", b =>
                {
                    b.HasOne("LabClothingCollectionAPI.Entities.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });
#pragma warning restore 612, 618
        }
    }
}
